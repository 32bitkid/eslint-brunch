// Generated by CoffeeScript 1.9.3
var CLIEngine, ESLinter, chalk, fs, path, pluralize;

chalk = require('chalk');

path = require('path');

fs = require('fs');

pluralize = require('pluralize');

CLIEngine = require('eslint').CLIEngine;

module.exports = ESLinter = (function() {
  ESLinter.prototype.brunchPlugin = true;

  ESLinter.prototype.type = 'javascript';

  ESLinter.prototype.extension = 'js';

  function ESLinter(config1) {
    var config, configFile, e, ref, ref1, ref2, stats;
    this.config = config1;
    config = ((ref = this.config) != null ? (ref1 = ref.plugins) != null ? ref1.eslint : void 0 : void 0) || {};
    this.warnOnly = (ref2 = config != null ? config.warnOnly : void 0) != null ? ref2 : true;
    configFile = path.join(process.cwd(), ".eslintrc");
    this.pattern = (config != null ? config.pattern : void 0) || /^app\/.*\.js?$/;
    try {
      stats = fs.statSync(configFile);
      if (stats.isFile()) {
        this.linter = new CLIEngine();
        this.linter.getConfigForFile(configFile);
      }
    } catch (_error) {
      e = _error;
      e = e.toString().replace("Error: ENOENT, ", "");
      console.warn(".eslintrc parsing error: " + e + " \nESLint will run with default options.");
      this.linter = new CLIEngine({
        useEslintrc: false
      });
    }
  }

  ESLinter.prototype.lint = function(data, path, callback) {
    var error, errorCount, errorMsg, msg, result;
    result = this.linter.executeOnText(data, path).results[0];
    errorCount = result.errorCount;
    if (errorCount === 0) {
      callback();
      return;
    }
    errorMsg = (function() {
      var i, len, ref, results;
      ref = result.messages;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        error = ref[i];
        results.push((function(_this) {
          return function(error) {
            return (chalk.bold(error.message)) + " (" + error.line + ":" + error.column + ")";
          };
        })(this)(error));
      }
      return results;
    }).call(this);
    errorMsg.unshift("ESLint detected " + errorCount + " " + (pluralize('problem', errorCount)) + ":");
    msg = errorMsg.join('\n');
    if (this.warnOnly) {
      msg = "warn: " + msg;
    }
    return callback(msg);
  };

  return ESLinter;

})();
